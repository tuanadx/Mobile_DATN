import 'dart:convert';
import 'package:dio/dio.dart';
import 'package:savefood/core/configs/api_config.dart';
import 'package:savefood/data/model/map/store_model.dart';

class StoreService {
  final Dio _dio;

  StoreService({Dio? dio}) : _dio = dio ?? _createDio();

  static Dio _createDio() {
    final dio = Dio();
    dio.options.baseUrl = ApiConfig.baseUrl;
    dio.options.connectTimeout = ApiConfig.connectTimeout;
    dio.options.receiveTimeout = ApiConfig.receiveTimeout;
    dio.options.headers = ApiConfig.defaultHeaders;

    dio.interceptors.add(LogInterceptor(
      request: true,
      requestBody: true,
      responseBody: true,
      error: true,
    ));
    return dio;
  }
  /// L·∫•y danh s√°ch c√°c qu√°n g·∫ßn v·ªã tr√≠ ng∆∞·ªùi d√πng
  Future<List<Store>> getNearbyStores({
    required double latitude,
    required double longitude,
    double radius = 5.0, // b√°n k√≠nh t√¨m ki·∫øm (km)
  }) async {
    try {
      print('üîç StoreService: G·ªçi API /stores/nearby v·ªõi params: lat=$latitude, lng=$longitude, radius=$radius');
      
      final response = await _dio.get('/stores/nearby', queryParameters: {
        'latitude': latitude,
        'longitude': longitude,
        'radius': radius,
      });

      print('üì° StoreService: Response status: ${response.statusCode}');
      print('üì¶ StoreService: Response data type: ${response.data.runtimeType}');
      print('üì¶ StoreService: Response data: ${response.data}');

      // H·ªó tr·ª£ c·∫£ 2 d·∫°ng: [ ... ] ho·∫∑c { data: { stores: [...] } }
      dynamic body = response.data;
      List<dynamic> storesJson = const [];
      
      // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p response l√† String (JSON ch∆∞a parse)
      if (body is String) {
        print('üìã StoreService: Response l√† String, c·∫ßn parse JSON');
        try {
          body = jsonDecode(body);
          print('üìã StoreService: ƒê√£ parse JSON th√†nh c√¥ng, type: ${body.runtimeType}');
        } catch (e) {
          print('‚ùå StoreService: L·ªói parse JSON: $e');
          throw Exception('Failed to parse JSON response: $e');
        }
      }
      
      if (body is List) {
        print('üìã StoreService: Response l√† List, c√≥ ${body.length} items');
        storesJson = body;
      } else if (body is Map) {
        print('üìã StoreService: Response l√† Map, keys: ${body.keys}');
        final dynamic data = body['data'];
        if (data is Map && data['stores'] is List) {
          storesJson = data['stores'] as List;
          print('üìã StoreService: T√¨m th·∫•y stores trong data.stores: ${storesJson.length} items');
        } else if (body['stores'] is List) {
          storesJson = body['stores'] as List;
          print('üìã StoreService: T√¨m th·∫•y stores trong root: ${storesJson.length} items');
        }
      }
      
      print('üè™ StoreService: S·∫Ω parse ${storesJson.length} stores');
      final stores = storesJson.map((e) {
        print('üè™ StoreService: Parsing store: $e');
        return Store.fromJson(Map<String, dynamic>.from(e));
      }).toList();
      
      print('‚úÖ StoreService: Tr·∫£ v·ªÅ ${stores.length} stores');
      return stores;
    } catch (e) {
      print('‚ùå StoreService: Error fetching nearby stores: $e');
      throw Exception('Failed to fetch nearby stores: $e');
    }
  }

  /// L·∫•y chi ti·∫øt m·ªôt qu√°n
  Future<Store?> getStoreDetail(String storeId) async {
    try {
      final response = await _dio.get('/stores/$storeId');
      return Store.fromJson(response.data['store'] ?? response.data['data']);
    } catch (e) {
      print('Error fetching store detail: $e');
      throw Exception('Failed to fetch store detail: $e');
    }
  }

  /// T√¨m ki·∫øm qu√°n theo t√™n
  Future<List<Store>> searchStores({
    required String keyword,
    double? latitude,
    double? longitude,
  }) async {
    try {
      final queryParams = <String, dynamic>{
        'keyword': keyword,
      };
      
      if (latitude != null && longitude != null) {
        queryParams['latitude'] = latitude;
        queryParams['longitude'] = longitude;
      }

      final response = await _dio.get('/stores/search', queryParameters: queryParams);
      final List<dynamic> storesJson = response.data['stores'] ?? response.data['data'] ?? [];
      
      return storesJson.map((json) => Store.fromJson(json)).toList();
    } catch (e) {
      print('Error searching stores: $e');
      throw Exception('Failed to search stores: $e');
    }
  }
}